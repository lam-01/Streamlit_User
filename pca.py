import streamlit as st
import numpy as np
import pandas as pd
from sklearn.datasets import fetch_openml
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import plotly.express as px
import mlflow
import mlflow.sklearn
import matplotlib.pyplot as plt
import os
import time

# Thi·∫øt l·∫≠p logging v·ªõi MLflow
mlflow.set_tracking_uri("file:./mlruns")

# T·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML
@st.cache_data
def load_mnist_data():
    X, y = fetch_openml('mnist_784', version=1, return_X_y=True, as_frame=False)
    return X, y

# L·∫•y m·∫´u d·ªØ li·ªáu ng·∫´u nhi√™n
def sample_data(X, y, sample_size):
    if sample_size > len(X):
        sample_size = len(X)
    indices = np.random.choice(len(X), sample_size, replace=False)
    return X[indices], y[indices]

# H√†m gi·∫£m chi·ªÅu b·∫±ng PCA
def apply_pca(X, n_components):
    pca = PCA(n_components=n_components)
    X_reduced = pca.fit_transform(X)
    explained_variance = np.sum(pca.explained_variance_ratio_)
    return X_reduced, explained_variance

# H√†m gi·∫£m chi·ªÅu b·∫±ng t-SNE
def apply_tsne(X, n_components):
    tsne = TSNE(n_components=n_components, random_state=42)
    X_reduced = tsne.fit_transform(X)
    return X_reduced

# V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n (2D ho·∫∑c 3D)
def plot_scatter(X_reduced, y, title):
    if X_reduced.shape[1] == 2:
        df = pd.DataFrame({
            'x': X_reduced[:, 0],
            'y': X_reduced[:, 1],
            'label': y
        })
        fig = px.scatter(df, x='x', y='y', color='label', title=title,
                         labels={'x': 'Component 1', 'y': 'Component 2'})
        return fig
    elif X_reduced.shape[1] == 3:
        df = pd.DataFrame({
            'x': X_reduced[:, 0],
            'y': X_reduced[:, 1],
            'z': X_reduced[:, 2],
            'label': y
        })
        fig = px.scatter_3d(df, x='x', y='y', z='z', color='label', title=title,
                            labels={'x': 'Component 1', 'y': 'Component 2', 'z': 'Component 3'})
        return fig
    return None

def main():
    st.title("Gi·∫£m Chi·ªÅu D·ªØ Li·ªáu MNIST v·ªõi PCA v√† t-SNE")
    
    tab1, tab2, tab3 = st.tabs(["T·ªïng quan", "Ph∆∞∆°ng ph√°p PCA v√† t-SNE", "MLflow"])

    with tab1:
        X, y = load_mnist_data()
        st.subheader("M·ªôt s·ªë ·∫£nh m·∫´u t·ª´ t·∫≠p d·ªØ li·ªáu MNIST")
        num_samples = 5  
        cols = st.columns(5)
        for i in range(num_samples):
            with cols[i % 5]:
                fig, ax = plt.subplots()
                ax.imshow(X[i].reshape(28, 28), cmap="gray")
                ax.axis("off")
                st.pyplot(fig)
                st.caption(f"Ch·ªØ s·ªë {y[i]}")

        st.subheader("üîπThu·∫≠t to√°n gi·∫£m chi·ªÅu d·ªØ li·ªáu")
        st.write("##### 1. PCA (Principal Component Analysis)")
        st.write("""- PCA l√† m·ªôt ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu d·ªØ li·ªáu (dimensionality reduction) t∆∞∆°ng ƒë·ªëi hi·ªáu qu·∫£ d·ª±a tr√™n ph√©p ph√¢n t√≠ch
         suy bi·∫øn (singular decomposition) m√† ·ªü ƒë√≥ ch√∫ng 
         ta s·∫Ω chi·∫øu c√°c ƒëi·ªÉm d·ªØ li·ªáu trong kh√¥ng gian cao chi·ªÅu xu·ªëng m·ªôt s·ªë √≠t
         nh·ªØng v√©c t∆° th√†nh ph·∫ßn ch√≠nh trong kh√¥ng gian th·∫•p chi·ªÅu
         m√† ƒë·ªìng th·ªùi v·∫´n b·∫£o to√†n t·ªëi ƒëa ƒë·ªô bi·∫øn ƒë·ªông c·ªßa d·ªØ li·ªáu sau bi·∫øn ƒë·ªïi. ∆Øu ƒëi·ªÉm c·ªßa PCA ƒë√≥ l√†
         s·ª≠ d·ª•ng t·∫•t c·∫£ c√°c bi·∫øn ƒë·∫ßu v√†o n√™n ph∆∞∆°ng ph√°p n√†y kh√¥ng b·ªè s√≥t nh·ªØng bi·∫øn quan tr·ªçng.""")
        st.write("- C√°c b∆∞·ªõc th·ª±c hi·ªán PCA :")
        st.image("p1.png")
        st.image("p2.png")
        st.write("##### 2. t-SNE (t-Distributed Stochastic Neighbor Embedding) ")
        st.write("""-  t-SNE l√† x√°c ƒë·ªãnh m·ªôt h√†m ph√¢n ph·ªëi x√°c su·∫•t chung d·ª±a tr√™n Gaussian cho c√°c ƒëi·ªÉm d·ªØ li·ªáu chi·ªÅu cao, x√°c ƒë·ªãnh m·ªôt h√†m ph√¢n ph·ªëi x√°c su·∫•t 
        chung d·ª±a tr√™n ph√¢n ph·ªëi t cho c√°c ƒëi·ªÉm d·ªØ li·ªáu chi·ªÅu th·∫•p v√† sau ƒë√≥ s·∫Øp x·∫øp l·∫°i d·ªØ li·ªáu chi·ªÅu th·∫•p ƒëi·ªÉm ƒë·ªÉ gi·∫£m ƒë·ªô ch√™nh l·ªách (v·ªÅ KL ph√¢n k√¨) gi·ªØa hai l·∫ßn ph√¢n b·ªë. """)
        st.write("C√°c b∆∞·ªõc th·ª±c hi·ªán t-SNE :")
        st.write("""+ B∆∞·ªõc 1: t-SNE m√¥ h√¨nh h√≥a m·ªôt ƒëi·ªÉm ƒë∆∞·ª£c ch·ªçn l√†m l√¢n c·∫≠n c·ªßa m·ªôt ƒëi·ªÉm kh√°c ·ªü c·∫£ chi·ªÅu cao h∆°n v√† chi·ªÅu th·∫•p h∆°n. N√≥ b·∫Øt ƒë·∫ßu b·∫±ng c√°ch t√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng t·ª´ng c·∫∑p gi·ªØa
        t·∫•t c·∫£ c√°c ƒëi·ªÉm d·ªØ li·ªáu trong kh√¥ng gian chi·ªÅu cao b·∫±ng c√°ch s·ª≠ d·ª•ng h·∫°t nh√¢n Gaussian. C√°c ƒëi·ªÉm xa nhau c√≥ x√°c su·∫•t ƒë∆∞·ª£c ch·ªçn th·∫•p h∆°n c√°c ƒëi·ªÉm g·∫ßn nhau. """)
        st.write("+ B∆∞·ªõc 2: Sau ƒë√≥, thu·∫≠t to√°n s·∫Ω c·ªë g·∫Øng √°nh x·∫° c√°c ƒëi·ªÉm d·ªØ li·ªáu c√≥ chi·ªÅu cao h∆°n v√†o kh√¥ng gian c√≥ chi·ªÅu th·∫•p h∆°n trong khi v·∫´n b·∫£o to√†n c√°c ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng theo t·ª´ng c·∫∑p.")  
        st.write("""+ B∆∞·ªõc 3: N√≥ ƒë·∫°t ƒë∆∞·ª£c b·∫±ng c√°ch gi·∫£m thi·ªÉu s·ª± ph√¢n k·ª≥ gi·ªØa ph√¢n ph·ªëi x√°c su·∫•t chi·ªÅu cao ban ƒë·∫ßu v√† chi·ªÅu th·∫•p ban ƒë·∫ßu. Thu·∫≠t to√°n s·ª≠ d·ª•ng gradient descent ƒë·ªÉ gi·∫£m thi·ªÉu s·ª± 
        ph√¢n k·ª≥. Nh√∫ng chi·ªÅu th·∫•p ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a ƒë·∫øn tr·∫°ng th√°i ·ªïn ƒë·ªãnh.""")

    with tab2:
        st.header("Ph∆∞∆°ng ph√°p PCA v√† t-SNE")
        X, y = load_mnist_data()

        st.subheader("T√πy ch·ªçn m·∫´u d·ªØ li·ªáu")
        sample_size = st.slider("Ch·ªçn k√≠ch th∆∞·ªõc m·∫´u d·ªØ li·ªáu", 100, 10000, 1000, key="sample_size_tab2")
        X_sample, y_sample = sample_data(X, y, sample_size)
        st.write(f"K√≠ch th∆∞·ªõc d·ªØ li·ªáu sau khi l·∫•y m·∫´u: {X_sample.shape}")

        model_name = st.text_input("Nh·∫≠p t√™n m√¥ h√¨nh:", "My_Model")
        if not model_name:
            model_name = "My_Model"

        method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu", ["PCA", "t-SNE"], key="method_tab2")

        if method == "PCA":
            n_components = st.slider("S·ªë l∆∞·ª£ng th√†nh ph·∫ßn PCA", 2, 50, 2, key="n_components_tab2")
        elif method == "t-SNE":
            n_components = st.slider("S·ªë l∆∞·ª£ng th√†nh ph·∫ßn t-SNE", 2, 10, 2, key="n_components_tsne")

        if st.button("Gi·∫£m chi·ªÅu", key="reduce_button_tab2"):
            with st.spinner("ƒêang th·ª±c hi·ªán gi·∫£m chi·ªÅu..."):
                start_time = time.time()
                mlflow.set_experiment("MNIST_Dimensionality_Reduction")
                if method == "PCA":
                    with mlflow.start_run(run_name=model_name):
                        X_reduced, explained_variance = apply_pca(X_sample, n_components)
                        mlflow.log_param("method", "PCA")
                        mlflow.log_param("n_components", n_components)
                        mlflow.log_param("sample_size", sample_size)
                        mlflow.log_param("model_name", model_name)
                        mlflow.log_metric("explained_variance", explained_variance)
                        if n_components in [2, 3]:
                            fig = plot_scatter(X_reduced, y_sample, f"PCA - {n_components} Components")
                            if fig is not None:
                                st.plotly_chart(fig)
                            st.write(f"T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch: {explained_variance:.4f}")
                        else:
                            st.write(f"K·∫øt qu·∫£ PCA c√≥ {n_components} chi·ªÅu, kh√¥ng th·ªÉ visual h√≥a tr·ª±c ti·∫øp ·ªü 2D ho·∫∑c 3D. T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch: {explained_variance:.4f}")

                elif method == "t-SNE":
                    with mlflow.start_run(run_name=model_name):
                        X_reduced = apply_tsne(X_sample, n_components)
                        mlflow.log_param("method", "t-SNE")
                        mlflow.log_param("n_components", n_components)
                        mlflow.log_param("sample_size", sample_size)
                        mlflow.log_param("model_name", model_name)
                        if n_components in [2, 3]:
                            fig = plot_scatter(X_reduced, y_sample, f"t-SNE - {n_components} Components")
                            if fig is not None:
                                st.plotly_chart(fig)
                        else:
                            st.write(f"K·∫øt qu·∫£ t-SNE c√≥ {n_components} chi·ªÅu, kh√¥ng th·ªÉ visual h√≥a tr·ª±c ti·∫øp ·ªü 2D ho·∫∑c 3D.")
                
                execution_time = time.time() - start_time
                mlflow.log_metric("execution_time", execution_time)
            
            time.sleep(1)
            st.success(f"ƒê√£ ho√†n th√†nh gi·∫£m chi·ªÅu v√† l∆∞u v√†o th√≠ nghi·ªám 'MNIST_Dimensionality_Reduction' v·ªõi t√™n m√¥ h√¨nh '{model_name}'!")

    with tab3:
        st.header("MLflow Tracking")

        experiments = mlflow.search_experiments()
        experiment_dict = {exp.name: exp.experiment_id for exp in experiments}
        selected_exp_id = experiment_dict.get("MNIST_Dimensionality_Reduction")

        if not selected_exp_id:
            st.write("Ch∆∞a c√≥ th√≠ nghi·ªám 'MNIST_Dimensionality_Reduction'. Vui l√≤ng gi·∫£m chi·ªÅu d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            search_query = st.text_input("T√¨m ki·∫øm theo t√™n m√¥ h√¨nh", "", key="search_tab3")
            runs = mlflow.search_runs(experiment_ids=[selected_exp_id])

            if not runs.empty:
                runs['experiment_name'] = "MNIST_Dimensionality_Reduction"
                if search_query:
                    runs = runs[runs['params.model_name'].str.contains(search_query, case=False, na=False)]
                
                st.write(f"T√¨m th·∫•y {len(runs)} k·∫øt qu·∫£ trong th√≠ nghi·ªám 'MNIST_Dimensionality_Reduction'.")
                available_columns = ['params.model_name', 'start_time', 'params.method', 
                                    'params.n_components', 'params.sample_size', 'metrics.explained_variance']
                display_columns = [col for col in available_columns if col in runs.columns]
                display_df = runs[display_columns].rename(columns={'params.model_name': 'Model Name'})
                st.dataframe(display_df)

                # Ch·ªçn b·∫±ng Model Name thay v√¨ Run ID
                model_names = runs['params.model_name'].unique().tolist()
                selected_model_name = st.selectbox("Ch·ªçn m·ªôt m√¥ h√¨nh ƒë·ªÉ xem chi ti·∫øt", model_names, key="select_model_tab3")
                
                if selected_model_name:
                    # L·∫•y run ƒë·∫ßu ti√™n c√≥ model_name ph√π h·ª£p
                    selected_run = runs[runs['params.model_name'] == selected_model_name].iloc[0]
                    st.subheader(f"Chi ti·∫øt c·ªßa Model Name: {selected_model_name}")
                    
                    st.write("**Th√¥ng tin chung:**")
                    general_info = {
                        'Model Name': selected_run.get('params.model_name', 'N/A'),
                        'Start Time': selected_run.get('start_time', 'N/A'),
                        'Execution Time (s)': selected_run.get('metrics.execution_time', 'N/A'),
                    }
                    for key, value in general_info.items():
                        if pd.notna(value):
                            st.write(f"{key}: {value}")

                    st.write("**Th√¥ng tin li√™n quan ƒë·∫øn ph∆∞∆°ng ph√°p:**")
                    method = selected_run.get('params.method', 'N/A')
                    if method == "PCA":
                        method_info = {
                            'Ph∆∞∆°ng ph√°p': method,
                            'S·ªë l∆∞·ª£ng th√†nh ph·∫ßn (n_components)': selected_run.get('params.n_components', 'N/A'),
                            'T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch (explained_variance)': selected_run.get('metrics.explained_variance', 'N/A'),
                            'K√≠ch th∆∞·ªõc m·∫´u (sample_size)': selected_run.get('params.sample_size', 'N/A'),
                        }
                    elif method == "t-SNE":
                        method_info = {
                            'Ph∆∞∆°ng ph√°p': method,
                            'S·ªë l∆∞·ª£ng th√†nh ph·∫ßn (n_components)': selected_run.get('params.n_components', 'N/A'),
                            'K√≠ch th∆∞·ªõc m·∫´u (sample_size)': selected_run.get('params.sample_size', 'N/A'),
                        }
                    else:
                        method_info = {'Ph∆∞∆°ng ph√°p': 'Kh√¥ng x√°c ƒë·ªãnh'}

                    for key, value in method_info.items():
                        if pd.notna(value):
                            st.write(f"{key}: {value}")
            else:
                st.write("Ch∆∞a c√≥ run n√†o trong th√≠ nghi·ªám 'MNIST_Dimensionality_Reduction'.")

if __name__ == "__main__":
    main()
