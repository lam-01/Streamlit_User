import streamlit as st
import numpy as np
import pandas as pd
from sklearn.datasets import fetch_openml
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import plotly.express as px
import mlflow
import mlflow.sklearn
import matplotlib.pyplot as plt
import os
import time

# Thi·∫øt l·∫≠p logging v·ªõi MLflow
mlflow.set_tracking_uri("file:./mlruns")
# Disable MLflow autologging to prevent unintended runs
mlflow.sklearn.autolog(disable=True)

# T·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML
@st.cache_data
def load_mnist_data():
    X, y = fetch_openml('mnist_784', version=1, return_X_y=True, as_frame=False)
    return X, y

# L·∫•y m·∫´u d·ªØ li·ªáu ng·∫´u nhi√™n
def sample_data(X, y, sample_size):
    if sample_size > len(X):
        sample_size = len(X)
    indices = np.random.choice(len(X), sample_size, replace=False)
    return X[indices], y[indices]

# H√†m gi·∫£m chi·ªÅu b·∫±ng PCA v·ªõi ti·∫øn tr√¨nh
def apply_pca(X, n_components, progress_bar):
    progress_bar.progress(20)  # 20% sau khi b·∫Øt ƒë·∫ßu PCA
    pca = PCA(n_components=n_components)
    X_reduced = pca.fit_transform(X)
    explained_variance = np.sum(pca.explained_variance_ratio_)
    progress_bar.progress(60)  # 60% sau khi gi·∫£m chi·ªÅu xong
    return X_reduced, explained_variance

# H√†m gi·∫£m chi·ªÅu b·∫±ng t-SNE v·ªõi ti·∫øn tr√¨nh
def apply_tsne(X, n_components, progress_bar):
    progress_bar.progress(20)  # 20% sau khi b·∫Øt ƒë·∫ßu t-SNE
    tsne = TSNE(n_components=n_components, random_state=42)
    X_reduced = tsne.fit_transform(X)
    progress_bar.progress(60)  # 60% sau khi gi·∫£m chi·ªÅu xong
    return X_reduced

# V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n (2D ho·∫∑c 3D)
def plot_scatter(X_reduced, y, title):
    if X_reduced.shape[1] == 2:
        df = pd.DataFrame({
            'x': X_reduced[:, 0],
            'y': X_reduced[:, 1],
            'label': y
        })
        fig = px.scatter(df, x='x', y='y', color='label', title=title,
                         labels={'x': 'Component 1', 'y': 'Component 2'})
        return fig
    elif X_reduced.shape[1] == 3:
        df = pd.DataFrame({
            'x': X_reduced[:, 0],
            'y': X_reduced[:, 1],
            'z': X_reduced[:, 2],
            'label': y
        })
        fig = px.scatter_3d(df, x='x', y='y', z='z', color='label', title=title,
                            labels={'x': 'Component 1', 'y': 'Component 2', 'z': 'Component 3'})
        return fig
    return None

def main():
    st.title("Gi·∫£m Chi·ªÅu D·ªØ Li·ªáu MNIST v·ªõi PCA v√† t-SNE")
    
    if 'run_in_progress' not in st.session_state:
        st.session_state.run_in_progress = False
    if 'last_run_id' not in st.session_state:
        st.session_state.last_run_id = None

    tab1, tab2, tab3 = st.tabs(["T·ªïng quan", "PCA v√† t-SNE", "MLflow"])

    with tab1:
        algorithm =st.selectbox("Ch·ªçn thu·∫≠t to√°n:", ["t-SNE","PCA"])
        

        if algorithm == "t-SNE":
            st.write("##### Thu·∫≠t to√°n t-SNE")
            st.write("**t-SNE (T-distributed Stochastic Neighbor Embedding)** l√† m·ªôt k·ªπ thu·∫≠t gi·∫£m k√≠ch th∆∞·ªõc phi tuy·∫øn kh√¥ng gi√°m s√°t ƒë·ªÉ kh√°m ph√° d·ªØ li·ªáu v√† tr·ª±c quan h√≥a d·ªØ li·ªáu chi·ªÅu cao. Gi·∫£m k√≠ch th∆∞·ªõc phi tuy·∫øn t√≠nh c√≥ nghƒ©a l√† thu·∫≠t to√°n cho ph√©p ch√∫ng ta t√°ch d·ªØ li·ªáu kh√¥ng th·ªÉ ph√¢n t√°ch b·∫±ng ƒë∆∞·ªùng th·∫≥ng.")
            st.write("**Nguy√™n l√≠ ho·∫°t ƒë·ªông**")
            st.write("- üí†**B∆∞·ªõc 1**:  t-SNE m√¥ h√¨nh h√≥a m·ªôt ƒëi·ªÉm ƒë∆∞·ª£c ch·ªçn l√†m h√†ng x√≥m c·ªßa m·ªôt ƒëi·ªÉm kh√°c ·ªü c·∫£ chi·ªÅu cao h∆°n v√† th·∫•p h∆°n. N√≥ b·∫Øt ƒë·∫ßu b·∫±ng c√°ch t√≠nh to√°n s·ª± t∆∞∆°ng ƒë·ªìng theo c·∫∑p gi·ªØa t·∫•t c·∫£ c√°c ƒëi·ªÉm d·ªØ li·ªáu trong kh√¥ng gian chi·ªÅu cao b·∫±ng c√°ch s·ª≠ d·ª•ng h·∫°t nh√¢n Gaussian.")
            st.image("tnse.png",caption="Ngu·ªìn : https://statquest.org")
            st.write("S·ª≠ d·ª•ng ph√¢n ph·ªëi chu·∫©n n·∫øu c√°c ƒëi·ªÉm c√°ch xa nhau, ch√∫ng c√≥ √≠t ƒëi·ªÉm gi·ªëng nhau, v√† n·∫øu ch√∫ng g·∫ßn nhau, ch√∫ng c√≥ nhi·ªÅu ƒëi·ªÉm gi·ªëng nhau")
            st.image("tnse2.png",caption="Ngu·ªìn : https://statquest.org")
            st.image("tnse3.png",caption="Ngu·ªìn : https://statquest.org")
            st.write("L·∫∑p l·∫°i thao t√°c n√†y cho t·∫•t c·∫£ c√°c ƒëi·ªÉm n·∫±m trong ph·∫°m vi ƒë√£ x√°c ƒë·ªãnh tr∆∞·ªõc ƒë√≥")
            st.image("tnse4.png",caption="Ngu·ªìn : https://statquest.org")
            st.write("Sau khi t√≠nh to√°n c√°c kho·∫£ng c√°ch ƒë∆∞·ª£c bi·ªÉu di·ªÖn tr√™n ph√¢n ph·ªëi chu·∫©n, chuy·ªÉn ƒë·ªïi ch√∫ng th√†nh m·ªôt t·∫≠p h·ª£p x√°c su·∫•t c·ªßa t·∫•t c·∫£ c√°c ƒëi·ªÉm (cchia t·ª∑ l·ªá ch√∫ng sao cho t·∫•t c·∫£ c√°c gi√° tr·ªã c√≥ t·ªïng b·∫±ng 1). ƒêi·ªÅu n√†y cung c·∫•p cho ch√∫ng ta m·ªôt t·∫≠p h·ª£p x√°c su·∫•t cho t·∫•t c·∫£ c√°c ƒëi·ªÉm ·ªü ƒë√≥")
            st.image("tnse5.png",caption="Ngu·ªìn : https://statquest.org")

            st.write("- üí†**B∆∞·ªõc 2** : Sau ƒë√≥, thu·∫≠t to√°n c·ªë g·∫Øng √°nh x·∫° c√°c ƒëi·ªÉm d·ªØ li·ªáu chi·ªÅu cao h∆°n v√†o kh√¥ng gian chi·ªÅu th·∫•p h∆°n trong khi v·∫´n gi·ªØ nguy√™n c√°c ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng theo c·∫∑p.")
            st.image("tnse6.png",caption="Ngu·ªìn : https://statquest.org")
            st.write("Khi t-SNE chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ kh√¥ng gian cao chi·ªÅu xu·ªëng kh√¥ng gian th·∫•p chi·ªÅu (2D ho·∫∑c 3D), n√≥ kh√¥ng s·ª≠ d·ª•ng ph√¢n ph·ªëi Gaussian n·ªØa m√† thay v√†o ƒë√≥ d√πng ph√¢n ph·ªëi t hay c√≤n g·ªçi l√† ph√¢n ph·ªëi Cauchy")
            st.write("a. T√≠nh to√°n t·∫•t c·∫£ c√°c kho·∫£ng c√°ch",caption="Ngu·ªìn : https://statquest.org")
            st.image("tnse7.png")
            st.write("b. Danh s√°ch c√°c ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng",caption="Ngu·ªìn : https://statquest.org")
            st.image("tnse8.png")
            st.write("c. T√≠nh to√°n t·∫≠p x√°c su·∫•t  trong kh√¥ng gian c√≥ chi·ªÅu th·∫•p")
            st.image("tnse9.png",caption="Ngu·ªìn : https://statquest.org")
            st.write("- üí†**B∆∞·ªõc 3**: N√≥ ƒë·∫°t ƒë∆∞·ª£c b·∫±ng c√°ch gi·∫£m thi·ªÉu s·ª± ph√¢n k·ª≥ gi·ªØa ph√¢n ph·ªëi x√°c su·∫•t chi·ªÅu cao v√† chi·ªÅu th·∫•p h∆°n ban ƒë·∫ßu. Thu·∫≠t to√°n s·ª≠ d·ª•ng ƒë·ªô d·ªëc gradient ƒë·ªÉ gi·∫£m thi·ªÉu s·ª± ph√¢n k·ª≥. Vi·ªác nh√∫ng chi·ªÅu th·∫•p h∆°n ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a ·ªü tr·∫°ng th√°i ·ªïn ƒë·ªãnh.")
            st.write("L√†m cho t·∫≠p h·ª£p c√°c x√°c su·∫•t t·ª´ kh√¥ng gian chi·ªÅu th·∫•p ph·∫£n √°nh c√†ng s√°t c√†ng t·ªët c√°c x√°c su·∫•t t·ª´ kh√¥ng gian chi·ªÅu cao gi√∫p hai c·∫•u tr√∫c t·∫≠p h·ª£p n√†y ph·∫£i gi·ªëng nhau.")
            st.image("tnse10.png",caption="Ngu·ªìn : https://statquest.org")
            st.write("Trong thu·∫≠t to√°n t-SNE, ƒë·ªÉ so s√°nh hai ph√¢n ph·ªëi x√°c su·∫•t gi·ªØa kh√¥ng gian cao chi·ªÅu (tr∆∞·ªõc khi gi·∫£m chi·ªÅu) v√† kh√¥ng gian th·∫•p chi·ªÅu (sau khi gi·∫£m chi·ªÅu), ta s·ª≠ d·ª•ng ph√¢n k·ª≥ Kullback-Leibler (KL Divergence).")
            st.image("tnse11.png",caption="Ngu·ªìn : https://statquest.org")
        elif algorithm == "PCA":
            st.write("")
       
    with tab2:
        X, y = load_mnist_data()
        st.write("##### M·ªôt s·ªë ·∫£nh m·∫´u t·ª´ t·∫≠p d·ªØ li·ªáu MNIST")
        num_samples = 5  
        cols = st.columns(5)
        for i in range(num_samples):
            with cols[i % 5]:
                fig, ax = plt.subplots()
                ax.imshow(X[i].reshape(28, 28), cmap="gray")
                ax.axis("off")
                st.pyplot(fig)
                st.caption(f"Ch·ªØ s·ªë {y[i]}")

        st.write("##### T√πy ch·ªçn m·∫´u d·ªØ li·ªáu")
        sample_size = st.number_input("Ch·ªçn c·ª° m·∫´u ƒë·ªÉ ph√¢n c·ª•m", min_value=1000, max_value=70000, value=5000, step=1000)
        X_sample, y_sample = sample_data(X, y, sample_size)
        st.write(f"K√≠ch th∆∞·ªõc d·ªØ li·ªáu sau khi l·∫•y m·∫´u: {X_sample.shape}")

        model_name = st.text_input("Nh·∫≠p t√™n m√¥ h√¨nh:")
        if not model_name:
            model_name= "Default_Model"
        method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu", ["PCA", "t-SNE"], key="method_tab2")

        if method == "PCA":
            n_components = st.slider("S·ªë l∆∞·ª£ng th√†nh ph·∫ßn PCA", 2, 50, 2, key="n_components_tab2")
        elif method == "t-SNE":
            n_components = st.slider("S·ªë l∆∞·ª£ng th√†nh ph·∫ßn t-SNE", 2, 10, 2, key="n_components_tsne")

        if st.button("Gi·∫£m chi·ªÅu", key="reduce_button_tab2"):
            if not st.session_state.run_in_progress:  
                st.session_state.run_in_progress = True
                with st.spinner("ƒêang th·ª±c hi·ªán gi·∫£m chi·ªÅu..."):
                    progress_bar = st.progress(0)
                    
                    if mlflow.active_run():
                        mlflow.end_run()
                    
                    progress_bar.progress(10)
                    start_time = time.time()
                    mlflow.set_experiment("MNIST_Dimensionality_Reduction")
                    
                    try:
                        with mlflow.start_run(run_name=model_name) as run:
                            st.session_state.last_run_id = run.info.run_id
                            if method == "PCA":
                                X_reduced, explained_variance = apply_pca(X_sample, n_components, progress_bar)
                                mlflow.log_param("method", "PCA")
                                mlflow.log_param("n_components", n_components)
                                mlflow.log_param("sample_size", sample_size)
                                mlflow.log_param("model_name", model_name)
                                mlflow.log_metric("explained_variance", explained_variance)
                                if n_components in [2, 3]:
                                    fig = plot_scatter(X_reduced, y_sample, f"PCA - {n_components} Components")
                                    progress_bar.progress(80)
                                    if fig is not None:
                                        st.plotly_chart(fig, use_container_width=True)
                                    st.write(f"T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch: {explained_variance:.4f}")
                                else:
                                    progress_bar.progress(80)
                                    st.write(f"K·∫øt qu·∫£ PCA c√≥ {n_components} chi·ªÅu, kh√¥ng th·ªÉ visual h√≥a tr·ª±c ti·∫øp ·ªü 2D ho·∫∑c 3D. T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch: {explained_variance:.4f}")

                            elif method == "t-SNE":
                                X_reduced = apply_tsne(X_sample, n_components, progress_bar)
                                mlflow.log_param("method", "t-SNE")
                                mlflow.log_param("n_components", n_components)
                                mlflow.log_param("sample_size", sample_size)
                                mlflow.log_param("model_name", model_name)
                                if n_components in [2, 3]:
                                    fig = plot_scatter(X_reduced, y_sample, f"t-SNE - {n_components} Components")
                                    progress_bar.progress(80)
                                    if fig is not None:
                                        st.plotly_chart(fig, use_container_width=True)
                                else:
                                    progress_bar.progress(80)
                                    st.write(f"K·∫øt qu·∫£ t-SNE c√≥ {n_components} chi·ªÅu, kh√¥ng th·ªÉ visual h√≥a tr·ª±c ti·∫øp ·ªü 2D ho·∫∑c 3D.")
                            
                            execution_time = time.time() - start_time
                            mlflow.log_metric("execution_time", execution_time)
                            progress_bar.progress(100)
                    except Exception as e:
                        if mlflow.active_run():
                            mlflow.end_run()
                    
                    # ƒê·∫£m b·∫£o ch·∫°y ƒë∆∞·ª£c k·∫øt th√∫c
                    if mlflow.active_run():
                        mlflow.end_run()
                
                time.sleep(1)
                # st.success(f"ƒê√£ ho√†n th√†nh gi·∫£m chi·ªÅu v√† l∆∞u v√†o th√≠ nghi·ªám 'MNIST_Dimensionality_Reduction' v·ªõi t√™n m√¥ h√¨nh '{model_name}'!")
                st.session_state.run_in_progress = False

    with tab3:
        st.subheader("MLflow Tracking")

        if mlflow.active_run():
            mlflow.end_run()

        experiments = mlflow.search_experiments()
        experiment_dict = {exp.name: exp.experiment_id for exp in experiments}
        selected_exp_id = experiment_dict.get("MNIST_Dimensionality_Reduction")

        if not selected_exp_id:
            st.write("Ch∆∞a c√≥ th√≠ nghi·ªám 'MNIST_Dimensionality_Reduction'. Vui l√≤ng gi·∫£m chi·ªÅu d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            search_query = st.text_input("T√¨m ki·∫øm theo t√™n m√¥ h√¨nh", "", key="search_tab3")
            runs = mlflow.search_runs(experiment_ids=[selected_exp_id])

            if not runs.empty:
                runs['experiment_name'] = "MNIST_Dimensionality_Reduction"
                if search_query:
                    runs = runs[runs['params.model_name'].str.contains(search_query, case=False, na=False)]
                
                available_columns = ['params.model_name', 'start_time', 'params.method', 
                                    'params.n_components', 'params.sample_size', 'metrics.explained_variance']
                display_columns = [col for col in available_columns if col in runs.columns]
                display_df = runs[display_columns].rename(columns={'params.model_name': 'Model Name'})
                st.dataframe(display_df)

                model_names = runs['params.model_name'].unique().tolist()
                selected_model_name = st.selectbox("Ch·ªçn m·ªôt m√¥ h√¨nh ƒë·ªÉ xem chi ti·∫øt", model_names, key="select_model_tab3")
                
                if selected_model_name:
                    selected_run = runs[runs['params.model_name'] == selected_model_name].iloc[0]
                    st.write(f"##### Chi ti·∫øt c·ªßa Model Name: {selected_model_name}")
                    
                    st.write("**Th√¥ng tin chung:**")
                    general_info = {
                        'Model Name': selected_run.get('params.model_name', 'N/A'),
                        'Start Time': selected_run.get('start_time', 'N/A')
                        # 'Execution Time (s)': selected_run.get('metrics.execution_time', 'N/A'),  # Kh√¥ng nh·∫≠n th·ª©c v√† c·ªë ƒë·ªãnh
                    }
                    for key, value in general_info.items():
                        if pd.notna(value):
                            st.write(f"{key}: {value}")

                    st.write("**Th√¥ng tin li√™n quan ƒë·∫øn ph∆∞∆°ng ph√°p:**")
                    method = selected_run.get('params.method', 'N/A')
                    if method == "PCA":
                        method_info = {
                            'Ph∆∞∆°ng ph√°p': method,
                            'S·ªë l∆∞·ª£ng th√†nh ph·∫ßn (n_components)': selected_run.get('params.n_components', 'N/A'),
                            'T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch': selected_run.get('metrics.explained_variance', 'N/A'),
                            'K√≠ch th∆∞·ªõc m·∫´u': selected_run.get('params.sample_size', 'N/A'),  # Fixed spacing
                        }
                    elif method == "t-SNE":
                        method_info = {
                            'Ph∆∞∆°ng ph√°p': method,
                            'S·ªë l∆∞·ª£ng th√†nh ph·∫ßn (n_components)': selected_run.get('params.n_components', 'N/A'),
                            'K√≠ch th∆∞·ªõc m·∫´u': selected_run.get('params.sample_size', 'N/A'),  # Fixed spacing
                        }
                    else:
                        method_info = {'Ph∆∞∆°ng ph√°p': 'Kh√¥ng x√°c ƒë·ªãnh'}

                    for key, value in method_info.items():
                        if pd.notna(value):
                            st.write(f"{key}: {value}")
            else:
                st.write("Ch∆∞a c√≥ run n√†o trong th√≠ nghi·ªám 'MNIST_Dimensionality_Reduction'.")

if __name__ == "__main__":
    main()
