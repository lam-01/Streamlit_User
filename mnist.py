import streamlit as st
import mlflow
import mlflow.sklearn
import numpy as np
import cv2
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from streamlit_drawable_canvas import st_canvas
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics.pairwise import cosine_similarity
from streamlit_tags import st_tags
import io
import os
import tempfile
import runpy

# üìå T·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu MNIST t·ª´ OpenML
@st.cache_data
def load_data():
    mnist = fetch_openml("mnist_784", version=1, as_frame=False)
    X, y = mnist.data, mnist.target.astype(int)  # Chuy·ªÉn nh√£n v·ªÅ ki·ªÉu s·ªë nguy√™n
    X = X / 255.0  # Chu·∫©n h√≥a v·ªÅ [0,1]
    return X, y

# üìå Chia d·ªØ li·ªáu th√†nh train, validation, v√† test
def split_data(X, y, train_size=0.7, val_size=0.15, test_size=0.15, random_state=42):
    # Chia t·∫≠p train v√† t·∫≠p test tr∆∞·ªõc
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=random_state
    )
    
    # Chia ti·∫øp t·∫≠p train th√†nh train v√† validation
    X_train, X_val, y_train, y_val = train_test_split(
        X_train, y_train, test_size=val_size / (train_size + val_size), random_state=random_state
    )
    
    return X_train, X_val, X_test, y_train, y_val, y_test

# üìå Hu·∫•n luy·ªán m√¥ h√¨nh
def train_model(model_name,params, X_train, X_val, X_test, y_train, y_val, y_test,custom_name=""):
    if model_name == "Decision Tree":
        model = DecisionTreeClassifier(
            max_depth=params["max_depth"],
            min_samples_split=params["min_samples_split"],
            min_samples_leaf=params["min_samples_leaf"],
            criterion=params["criterion"],
            random_state=42
        )
    elif model_name == "SVM":
        model = SVC(
            kernel=params["kernel"],
            C=params["C"],
            probability=True
        )
    else:
        raise ValueError("Invalid model selected!")

    model.fit(X_train, y_train)

    y_train_pred =model.predict(X_train)
    y_test_pred = model.predict(X_test)
    y_val_pred = model.predict(X_val)
    # T√≠nh ƒë·ªô ch√≠nh x√°c
    train_accuracy = accuracy_score(y_train, y_train_pred)
    val_accuracy = accuracy_score(y_val, y_val_pred)
    test_accuracy = accuracy_score(y_test, y_test_pred)


    run_name = custom_name if custom_name else f"{model_name}_Classification"
   
    with mlflow.start_run(run_name=run_name):
        # Log c√°c tham s·ªë chi ti·∫øt c·ªßa m√¥ h√¨nh
        mlflow.log_param("model_name", model_name)
        for param_name, param_value in params.items():
            mlflow.log_param(param_name, param_value)
        
        # Log c√°c metrics
        mlflow.log_metric("train_accuracy", train_accuracy)
        mlflow.log_metric("val_accuracy", val_accuracy)
        mlflow.log_metric("test_accuracy", test_accuracy)
        
        # L∆∞u m√¥ h√¨nh
        mlflow.sklearn.log_model(model, model_name)
    
    return model, train_accuracy, val_accuracy, test_accuracy

# üìå X·ª≠ l√Ω ·∫£nh t·∫£i l√™n
def preprocess_uploaded_image(image):
    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    image = cv2.resize(image, (28, 28))
    image = image / 255.0
    return image.reshape(1, -1)

# üìå X·ª≠ l√Ω ·∫£nh t·ª´ v·∫Ω tay tr√™n canvas
def preprocess_canvas_image(canvas):
    image = np.array(canvas)
    image = cv2.cvtColor(image, cv2.COLOR_RGBA2GRAY)
    image = cv2.bitwise_not(image)
    image = cv2.resize(image, (28, 28))
    image = image / 255.0
    return image.reshape(1, -1)

def show_sample_images(X, y):
    st.write("**üñºÔ∏è M·ªôt v√†i m·∫´u d·ªØ li·ªáu t·ª´ MNIST**")
    fig, axes = plt.subplots(1, 10, figsize=(15, 3))
    for digit in range(10):
        idx = np.where(y == digit)[0][0]
        ax = axes[digit]
        ax.imshow(X[idx].reshape(28, 28), cmap='gray')
        ax.set_title(f"{digit}")
        ax.axis('off')
    st.pyplot(fig)


# üìå Giao di·ªán Streamlit
def create_streamlit_app():
    st.title("üî¢ Ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay")
    
    # # Load d·ªØ li·ªáu
    X, y = load_data()
    # T·∫°o c√°c tab
    tab1, tab2 ,tab3= st.tabs(["üìã Hu·∫•n luy·ªán", "üîÆ D·ª± ƒëo√°n","‚ö° Mlflow"])
    with tab1:
        st.write(f"**S·ªë l∆∞·ª£ng m·∫´u c·ªßa b·ªô d·ªØ li·ªáu MNIST : {X.shape[0]}**")
        # Hi·ªÉn th·ªã m·∫´u d·ªØ li·ªáu v√† ph√¢n ph·ªëi d·ªØ li·ªáu
        show_sample_images(X, y)
        
        st.write("**üìä T·ª∑ l·ªá d·ªØ li·ªáu**")
        # Ch·ªçn t·ª∑ l·ªá d·ªØ li·ªáu Test v√† Validation
        test_size = st.slider("T·ª∑ l·ªá Test (%)", min_value=5, max_value=30, value=15, step=5)
        val_size = st.slider("T·ª∑ l·ªá Validation (%)", min_value=5, max_value=30, value=15, step=5)

        # T√≠nh to√°n t·ª∑ l·ªá Train
        train_size = 100 - test_size  # T·ª∑ l·ªá Train l√† ph·∫ßn c√≤n l·∫°i sau khi tr·ª´ Test
        val_ratio = val_size / train_size  # T·ª∑ l·ªá Validation tr√™n t·∫≠p Train

        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá
        if val_ratio >= 1.0:
            st.error("T·ª∑ l·ªá Validation qu√° l·ªõn so v·ªõi Train! Vui l√≤ng ƒëi·ªÅu ch·ªânh l·∫°i.")
        else:
            # Chia d·ªØ li·ªáu
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size/100, random_state=42)
            X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=val_ratio, random_state=42)

            # Hi·ªÉn th·ªã b·∫£ng t·ª∑ l·ªá
            data_ratios = pd.DataFrame({
                "T·∫≠p d·ªØ li·ªáu": ["Train", "Validation", "Test"],
                "T·ª∑ l·ªá (%)": [train_size - val_size, val_size, test_size]
            })
            st.table(data_ratios)

            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng m·∫´u
            st.write(f"üßÆ S·ªë l∆∞·ª£ng m·∫´u Train: {len(X_train)}")
            st.write(f"üßÆ S·ªë l∆∞·ª£ng m·∫´u Validation: {len(X_val)}")
            st.write(f"üßÆ S·ªë l∆∞·ª£ng m·∫´u Test: {len(X_test)}")


        st.write("**üöÄ Hu·∫•n luy·ªán m√¥ h√¨nh**")
        # Nh·∫≠p t√™n m√¥ h√¨nh
        model_custom_name = st.text_input("Nh·∫≠p t√™n m√¥ h√¨nh ƒë·ªÉ l∆∞u v√†o MLflow:")
        mlflow.log_param("model_custom_name", model_custom_name)
        # Ch·ªçn m√¥ h√¨nh
        model_name = st.selectbox("üîç Ch·ªçn m√¥ h√¨nh", ["Decision Tree", "SVM"])
        params = {}

        if model_name == "Decision Tree":
            params["criterion"] = st.selectbox("üìè Ti√™u ch√≠ ƒë√°nh gi√°", ["gini", "entropy", "log_loss"],help="""- **Gini impurity** ƒëo l∆∞·ªùng x√°c su·∫•t m·ªôt m·∫´u ƒë∆∞·ª£c ch·ªçn ng·∫´u nhi√™n t·ª´ t·∫≠p d·ªØ li·ªáu b·ªã ph√¢n lo·∫°i sai 
            n·∫øu n√≥ ƒë∆∞·ª£c g√°n nh√£n ng·∫´u nhi√™n theo ph√¢n ph·ªëi c·ªßa c√°c l·ªõp trong t·∫≠p d·ªØ li·ªáu.
            \n- **Entropy** ƒëo l∆∞·ªùng m·ª©c ƒë·ªô h·ªón lo·∫°n ho·∫∑c kh√¥ng ch·∫Øc ch·∫Øn trong t·∫≠p d·ªØ li·ªáu. N√≥ d·ª±a tr√™n kh√°i ni·ªám entropy trong l√Ω thuy·∫øt th√¥ng tin.
            \n- **Log loss (hay cross-entropy)** ƒëo l∆∞·ªùng s·ª± kh√°c bi·ªát gi·ªØa ph√¢n ph·ªëi x√°c su·∫•t th·ª±c t·∫ø v√† ph√¢n ph·ªëi x√°c su·∫•t d·ª± ƒëo√°n. N√≥ th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c b√†i to√°n ph√¢n lo·∫°i x√°c su·∫•t.
            """)
            params["max_depth"] = st.slider("üå≥ ƒê·ªô s√¢u t·ªëi ƒëa (max_depth)", 1, 30, 15,help="""- **max_depth** l√† tham s·ªë gi·ªõi h·∫°n ƒë·ªô s√¢u t·ªëi ƒëa c·ªßa c√¢y quy·∫øt ƒë·ªãnh. ƒê·ªô s√¢u c·ªßa c√¢y ƒë∆∞·ª£c t√≠nh 
            t·ª´ n√∫t g·ªëc (root) ƒë·∫øn n√∫t l√° (leaf) xa nh·∫•t.
            \n N·∫øu (max_depth > 25) qu√° l·ªõn, c√¢y c√≥ th·ªÉ tr·ªü n√™n ph·ª©c t·∫°p v√† d·ªÖ b·ªã overfitting (h·ªçc thu·ªôc d·ªØ li·ªáu hu·∫•n luy·ªán nh∆∞ng k√©m hi·ªáu qu·∫£ tr√™n d·ªØ li·ªáu m·ªõi).
            \n N·∫øu (max_depth < 10) qu√° nh·ªè, c√¢y c√≥ th·ªÉ qu√° ƒë∆°n gi·∫£n v√† d·∫´n ƒë·∫øn underfitting (kh√¥ng h·ªçc ƒë∆∞·ª£c ƒë·ªß th√¥ng tin t·ª´ d·ªØ li·ªáu).""")
            params["min_samples_split"] = st.slider("üîÑ S·ªë m·∫´u t·ªëi thi·ªÉu ƒë·ªÉ chia nh√°nh (min_samples_split)", 2, 10, 5,help="""
            \n- **min_samples_split** l√† s·ªë l∆∞·ª£ng m·∫´u t·ªëi thi·ªÉu c·∫ßn thi·∫øt ƒë·ªÉ chia m·ªôt n√∫t (node) th√†nh c√°c n√∫t con. N·∫øu s·ªë l∆∞·ª£ng m·∫´u t·∫°i m·ªôt n√∫t √≠t h∆°n gi√° tr·ªã n√†y, n√∫t ƒë√≥ s·∫Ω kh√¥ng ƒë∆∞·ª£c chia ti·∫øp.
            \n Gi√° tr·ªã l·ªõn h∆°n (5-10) gi√∫p ngƒÉn ch·∫∑n vi·ªác chia nh√°nh qu√° m·ª©c, t·ª´ ƒë√≥ gi·∫£m nguy c∆° overfitting.
            \n Gi√° tr·ªã nh·ªè h∆°n (2-4) cho ph√©p c√¢y chia nh√°nh nhi·ªÅu h∆°n, nh∆∞ng c√≥ th·ªÉ d·∫´n ƒë·∫øn c√¢y ph·ª©c t·∫°p h∆°n.
            
            """)
            params["min_samples_leaf"] = st.slider("üçÉ S·ªë m·∫´u t·ªëi thi·ªÉu ·ªü l√° (min_samples_leaf)", 1, 10, 2,help="""
            \n- **min_samples_leaf** l√† s·ªë l∆∞·ª£ng m·∫´u t·ªëi thi·ªÉu c·∫ßn thi·∫øt t·∫°i m·ªói n√∫t l√° (leaf node). N·∫øu m·ªôt ph√¢n chia d·∫´n ƒë·∫øn m·ªôt l√° c√≥ √≠t m·∫´u h∆°n gi√° tr·ªã n√†y, ph√¢n chia ƒë√≥ s·∫Ω kh√¥ng ƒë∆∞·ª£c th·ª±c hi·ªán.
            \n Gi√° tr·ªã l·ªõn h∆°n (5-10) gi√∫p ngƒÉn ch·∫∑n vi·ªác t·∫°o ra c√°c l√° qu√° nh·ªè, t·ª´ ƒë√≥ gi·∫£m nguy c∆° overfitting.
            \n Gi√° tr·ªã nh·ªè h∆°n (1-4) cho ph√©p c√¢y t·∫°o ra c√°c l√° nh·ªè h∆°n, nh∆∞ng c√≥ th·ªÉ d·∫´n ƒë·∫øn c√¢y ph·ª©c t·∫°p h∆°n.
            """)

        elif model_name == "SVM":
            params["kernel"] = st.selectbox("‚öôÔ∏è Kernel", ["linear", "rbf", "poly", "sigmoid"],help="""**Kernel** l√† m·ªôt h√†m ƒë∆∞·ª£c s·ª≠ d·ª•ng trong SVM ƒë·ªÉ √°nh x·∫° d·ªØ li·ªáu t·ª´ kh√¥ng gian ƒë·∫ßu v√†o sang m·ªôt kh√¥ng gian ƒë·∫∑c tr∆∞ng (feature space) c√≥ chi·ªÅu cao h∆°n, gi√∫p SVM c√≥ th·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu phi tuy·∫øn t√≠nh.
            \n- **Linear Kernel**: m·ªôt trong nh·ªØng lo·∫°i kernel ƒë∆°n gi·∫£n nh·∫•t. N√≥ ƒë∆∞·ª£c s·ª≠ d·ª•ng khi d·ªØ li·ªáu c√≥ th·ªÉ ƒë∆∞·ª£c ph√¢n lo·∫°i b·∫±ng m·ªôt ƒë∆∞·ªùng th·∫≥ng (ho·∫∑c m·∫∑t ph·∫≥ng trong kh√¥ng gian nhi·ªÅu chi·ªÅu).
            \n- **RBF Kernel (Radial Basis Function)**: m·ªôt lo·∫°i kernel phi tuy·∫øn t√≠nh, r·∫•t ph·ªï bi·∫øn trong SVM. N√≥ c√≥ kh·∫£ nƒÉng x·ª≠ l√Ω c√°c m·ªëi quan h·ªá ph·ª©c t·∫°p gi·ªØa c√°c ƒëi·ªÉm d·ªØ li·ªáu.
            \n- **Polynomial Kernel**: cho ph√©p m√¥ h√¨nh h√≥a c√°c m·ªëi quan h·ªá phi tuy·∫øn t√≠nh b·∫±ng c√°ch s·ª≠ d·ª•ng c√°c ƒëa th·ª©c. Tham s·ªë b·∫≠c c·ªßa ƒëa th·ª©c c√≥ th·ªÉ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh ƒë·ªÉ thay ƒë·ªïi ƒë·ªô ph·ª©c t·∫°p c·ªßa m√¥ h√¨nh.
            \n- **Sigmoid Kernel**: t∆∞∆°ng t·ª± nh∆∞ h√†m k√≠ch ho·∫°t sigmoid trong m·∫°ng n∆°-ron. N√≥ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o ra c√°c quy·∫øt ƒë·ªãnh phi tuy·∫øn t√≠nh.
            """)
            params["C"] = st.slider("üîß Tham s·ªë C ", 0.1, 10.0, 1.0,help="""\n- **C** l√† tham s·ªë ƒëi·ªÅu ch·ªânh (regularization parameter) trong SVM, ki·ªÉm so√°t s·ª± ƒë√°nh ƒë·ªïi gi·ªØa vi·ªác t·∫°o ra m·ªôt bi√™n (margin) r·ªông v√† vi·ªác ph√¢n lo·∫°i ch√≠nh x√°c c√°c ƒëi·ªÉm d·ªØ li·ªáu hu·∫•n luy·ªán.
            \n C l·ªõn: M√¥ h√¨nh c·ªë g·∫Øng ph√¢n lo·∫°i ch√≠nh x√°c t·∫•t c·∫£ c√°c ƒëi·ªÉm d·ªØ li·ªáu hu·∫•n luy·ªán, c√≥ th·ªÉ d·∫´n ƒë·∫øn overfitting.
            \n C nh·ªè: M√¥ h√¨nh cho ph√©p m·ªôt s·ªë ƒëi·ªÉm d·ªØ li·ªáu b·ªã ph√¢n lo·∫°i sai ƒë·ªÉ t·∫°o ra bi√™n r·ªông h∆°n, gi√∫p gi·∫£m overfitting.""")
        # Hu·∫•n luy·ªán m√¥ h√¨nh
        if st.button("üöÄ Hu·∫•n luy·ªán m√¥ h√¨nh"):
            with st.spinner("üîÑ ƒêang hu·∫•n luy·ªán..."):
                model, train_accuracy, val_accuracy, test_accuracy = train_model(
                model_name,params, X_train, X_val, X_test, y_train, y_val, y_test,custom_name=model_custom_name
            )
               # L∆∞u th√¥ng tin v√†o MLFlow
            with mlflow.start_run():
                mlflow.set_tag("model_name", model_custom_name)
                mlflow.log_params(params)
                mlflow.log_metrics({
                    "train_accuracy": train_accuracy,
                    "val_accuracy": val_accuracy,
                    "test_accuracy": test_accuracy
                })
                mlflow.sklearn.log_model(model, "model", registered_model_name=model_custom_name)
            st.success(f"‚úÖ Hu·∫•n luy·ªán xong!")
            
            # Hi·ªÉn th·ªã ƒë·ªô ch√≠nh x√°c tr√™n c·∫£ 3 t·∫≠p d·ªØ li·ªáu
            st.write(f"üéØ **ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p train: {train_accuracy:.4f}**")
            st.write(f"üéØ **ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p validation: {val_accuracy:.4f}**")
            st.write(f"üéØ **ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p test: {test_accuracy:.4f}**")

    with tab2:
        # Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p ·∫£nh
        option = st.radio("üñºÔ∏è Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p:", ["üìÇ T·∫£i ·∫£nh l√™n", "‚úèÔ∏è V·∫Ω s·ªë"])

        # üìÇ X·ª≠ l√Ω ·∫£nh t·∫£i l√™n
        if option == "üìÇ T·∫£i ·∫£nh l√™n":
            uploaded_file = st.file_uploader("üì§ T·∫£i ·∫£nh s·ªë vi·∫øt tay (PNG, JPG)", type=["png", "jpg", "jpeg"])

            if uploaded_file is not None:
                image = cv2.imdecode(np.frombuffer(uploaded_file.read(), np.uint8), cv2.IMREAD_COLOR)
                processed_image = preprocess_uploaded_image(image)

                # Hi·ªÉn th·ªã ·∫£nh
                st.image(image, caption="üì∑ ·∫¢nh t·∫£i l√™n", use_column_width=True)

                # D·ª± ƒëo√°n s·ªë
                if st.button("üîÆ D·ª± ƒëo√°n"):
                    model, train_accuracy, val_accuracy, test_accuracy= train_model(model_name,params, X_train, X_val, X_test, y_train, y_val, y_test,custom_name=model_custom_name)
                    prediction = model.predict(processed_image)[0]
                    probabilities = model.predict_proba(processed_image)[0]

                    st.write(f"üéØ **D·ª± ƒëo√°n: {prediction}**")
                    st.write(f"üî¢ **ƒê·ªô tin c·∫≠y: {probabilities[prediction] * 100:.2f}%**")

        # ‚úèÔ∏è V·∫Ω s·ªë tr√™n canvas
        elif option == "‚úèÔ∏è V·∫Ω s·ªë":
            canvas_result = st_canvas(
                fill_color="white",
                stroke_width=15,
                stroke_color="black",
                background_color="white",
                width=280,
                height=280,
                drawing_mode="freedraw",
                key="canvas"
            )

            if st.button("üîÆ D·ª± ƒëo√°n"):
                if canvas_result.image_data is not None:
                    processed_canvas = preprocess_canvas_image(canvas_result.image_data)

                    model, train_accuracy, val_accuracy, test_accuracy= train_model(model_name,params, X_train, X_val, X_test, y_train, y_val, y_test,custom_name=model_custom_name)
                    prediction = model.predict(processed_canvas)[0]
                    probabilities = model.predict_proba(processed_canvas)[0]

                    st.write(f"üéØ **D·ª± ƒëo√°n: {prediction}**")
                    st.write(f"üî¢ **ƒê·ªô tin c·∫≠y: {probabilities[prediction] * 100:.2f}%**")

    with tab3:
        st.header("üìä MLflow Tracking")

        # L·∫•y danh s√°ch c√°c phi√™n l√†m vi·ªác t·ª´ MLflow
        runs = mlflow.search_runs(order_by=["start_time desc"])

        if not runs.empty:
            # L·∫•y danh s√°ch t√™n m√¥ h√¨nh
            runs["model_custom_name"] = runs["tags.mlflow.runName"]  # Gi·∫£ s·ª≠ t√™n m√¥ h√¨nh l∆∞u trong tag `mlflow.runName`
            model_names = runs["model_custom_name"].dropna().unique().tolist()

            # **T√¨m ki·∫øm m√¥ h√¨nh**
            search_model_name = st.text_input("üîç Nh·∫≠p t√™n m√¥ h√¨nh ƒë·ªÉ t√¨m ki·∫øm:", "")

            if search_model_name:
                filtered_runs = runs[runs["model_custom_name"].str.contains(search_model_name, case=False, na=False)]
            else:
                filtered_runs = runs

            # **Hi·ªÉn th·ªã danh s√°ch m√¥ h√¨nh**
            if not filtered_runs.empty:
                st.write("### üìú Danh s√°ch m√¥ h√¨nh ƒë√£ l∆∞u:")
                st.dataframe(filtered_runs[["model_custom_name", "run_id", "start_time", "metrics.train_accuracy", "metrics.val_accuracy", "metrics.test_accuracy"]])

                # **Ch·ªçn m·ªôt m√¥ h√¨nh ƒë·ªÉ xem chi ti·∫øt**
                selected_run_id = st.selectbox("üìù Ch·ªçn m·ªôt m√¥ h√¨nh ƒë·ªÉ xem chi ti·∫øt:", filtered_runs["run_id"].tolist())

                if selected_run_id:
                    run_details = mlflow.get_run(selected_run_id)
                    st.write(f"### üîç Chi ti·∫øt m√¥ h√¨nh: `{run_details.data.tags.get('mlflow.runName', 'Kh√¥ng c√≥ t√™n')}`")
                    st.write("üìå **Tham s·ªë:**")
                    for key, value in run_details.data.params.items():
                        st.write(f"- **{key}**: {value}")

                    st.write("üìä **Metric:**")
                    for key, value in run_details.data.metrics.items():
                        st.write(f"- **{key}**: {value}")

                    # st.write("üìÇ **Artifacts:**")
                    # if run_details.info.artifact_uri:
                    #     st.write(f"- **Artifact URI**: {run_details.info.artifact_uri}")
                    # else:
                    #     st.write("- Kh√¥ng c√≥ artifacts n√†o.")

            else:
                st.write("‚ùå Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh n√†o.")

        else:
            st.write("‚ö†Ô∏è Kh√¥ng c√≥ phi√™n l√†m vi·ªác n√†o ƒë∆∞·ª£c ghi l·∫°i.")
        

if __name__ == "__main__":
    create_streamlit_app()
