import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_predict
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.impute import SimpleImputer
import mlflow
import mlflow.sklearn
import streamlit as st
import plotly.express as px
from sklearn.metrics import mean_squared_error, r2_score
import os

class TitanicAnalyzer:
    def __init__(self):
        self.data = None
        self.model = None
        self.scaler = None  # S·∫Ω kh·ªüi t·∫°o sau khi c√≥ d·ªØ li·ªáu
        self.poly = None
        self.feature_columns = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']
        self.is_fitted = False
        self.sex_male = 0  # Default value
        self.sex_female = 1  # Default value
        self.embarked_C = 0  # Default value
        self.embarked_Q = 1  # Default value
        self.embarked_S = 2  # Default value
    
    def load_and_preprocess(self, data_path):
        """ƒê·ªçc v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu v·ªõi MLflow"""
        try:
            mlflow.start_run()
            st.write("##### **üìöTi·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu**")
            
            # ƒê·ªçc d·ªØ li·ªáu
            st.write("**1. ƒê·ªçc d·ªØ li·ªáu**")
            self.data = pd.read_csv(data_path)
            mlflow.log_param("initial_data_shape", self.data.shape)
            st.write("D·ªØ li·ªáu ban ƒë·∫ßu:", self.data.head())
            
            # X·ª≠ l√Ω missing values
            st.write("**2. X·ª≠ l√Ω gi√° tr·ªã b·ªã thi·∫øu**")
            st.write("- C√°c c·ªôt d·ªØ li·ªáu b·ªã thi·∫øu: Age, Cabin, Embarked")
            missing_values_before = self.data.isnull().sum()
            st.write("S·ªë l∆∞·ª£ng d·ªØ li·ªáu b·ªã thi·∫øu : ")
            st.dataframe(missing_values_before.to_frame().T)

            # Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω gi√° tr·ªã b·ªã thi·∫øu
            missing_value_strategy = st.selectbox(
                "## Ch·ªçn ph∆∞∆°ng ph√°p ", ["ƒêi·ªÅn gi√° tr·ªã trung b√¨nh mean", "ƒêi·ªÅn gi√° tr·ªã trung v·ªã median", "ƒêi·ªÅn gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t mode", "X√≥a h√†ng ch·ª©a d·ªØ li·ªáu thi·∫øu drop"], index=0
            )

            # H√†m x·ª≠ l√Ω d·ªØ li·ªáu b·ªã thi·∫øu
            def preprocess_data(df, missing_value_strategy):
                df = df.dropna(subset=['Survived'])  # B·ªè c√°c h√†ng c√≥ gi√° tr·ªã thi·∫øu ·ªü c·ªôt m·ª•c ti√™u

                # X√°c ƒë·ªãnh c·ªôt s·ªë v√† c·ªôt ph√¢n lo·∫°i
                num_cols = df.select_dtypes(include=['number']).columns
                cat_cols = df.select_dtypes(exclude=['number']).columns

                # X·ª≠ l√Ω gi√° tr·ªã thi·∫øu cho c·ªôt s·ªë
                if missing_value_strategy == 'mean':
                    df[num_cols] = df[num_cols].fillna(df[num_cols].mean())
                elif missing_value_strategy == 'median':
                    df[num_cols] = df[num_cols].fillna(df[num_cols].median())
                elif missing_value_strategy == 'mode':
                    for col in num_cols:
                        if not df[col].mode().dropna().empty:
                            df[col] = df[col].fillna(df[col].mode()[0])
                # Lu√¥n x·ª≠ l√Ω gi√° tr·ªã thi·∫øu cho Cabin v√† Embarked
                df['Cabin'] = df['Cabin'].fillna("Unknown")  # ƒêi·ªÅn "Unknown" cho Cabin
                if not df['Embarked'].mode().dropna().empty:
                    df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])  # ƒêi·ªÅn mode() cho Embarked

                if missing_value_strategy == 'drop':
                    df.dropna(inplace=True)  # N·∫øu ch·ªçn "drop", x√≥a h√†ng c√≤n thi·∫øu

                return df  # Tr·∫£ v·ªÅ dataframe ƒë√£ x·ª≠ l√Ω

            # G·ªçi h√†m x·ª≠ l√Ω d·ªØ li·ªáu b·ªã thi·∫øu
            self.data = preprocess_data(self.data, missing_value_strategy)

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng d·ªØ li·ªáu b·ªã thi·∫øu sau khi x·ª≠ l√Ω
            missing_values_after = self.data.isnull().sum().sum()
            mlflow.log_metric("missing_values_before", missing_values_before.sum())  # Chuy·ªÉn th√†nh s·ªë t·ªïng
            mlflow.log_metric("missing_values_after", missing_values_after)
            st.write("S·ªë l∆∞·ª£ng gi√° tr·ªã b·ªã thi·∫øu sau x·ª≠ l√Ω:")
            st.dataframe(self.data.isnull().sum().to_frame().T)


            # X√≥a c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt
            st.write("**3. X√≥a c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt**")
            st.write("""
            - **Name**: T√™n h√†nh kh√°ch kh√¥ng ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn kh·∫£ nƒÉng s·ªëng s√≥t.
            - **Ticket**: S·ªë v√© l√† m·ªôt chu·ªói k√Ω t·ª± kh√¥ng mang √Ω nghƒ©a r√µ r√†ng ƒë·ªëi v·ªõi m√¥ h√¨nh d·ª± ƒëo√°n.
            - **Cabin**: D·ªØ li·ªáu b·ªã thi·∫øu qu√° nhi·ªÅu, r·∫•t nhi·ªÅu h√†nh kh√°ch kh√¥ng c√≥ th√¥ng tin v·ªÅ cabin.
            """)

            # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn c·ªôt ƒë·ªÉ x√≥a
            columns_to_drop = st.multiselect(
                "Ch·ªçn c·ªôt ƒë·ªÉ x√≥a:",
                self.data.columns.tolist(),  
                default=['Name', 'Ticket', 'Cabin']  # G·ª£i √Ω m·∫∑c ƒë·ªãnh
            )
            # Lo·∫°i b·ªè c·ªôt PassengerId
            if 'PassengerId' in self.data.columns:
                self.data = self.data.drop(columns=['PassengerId'])
    
            # X√≥a c√°c c·ªôt ƒë∆∞·ª£c ch·ªçn
            self.data.drop(columns=columns_to_drop, inplace=True, errors='ignore')

            # Hi·ªÉn th·ªã th√¥ng tin sau khi x√≥a c·ªôt
            st.write("D·ªØ li·ªáu sau khi x√≥a c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt:")
            st.dataframe(self.data.head())

            
            st.write("**4. M√£ h√≥a bi·∫øn ph√¢n lo·∫°i**")
            st.write("**M√£ h√≥a c·ªôt Sex:**")
            sex_male = st.number_input("Nh·∫≠p gi√° tr·ªã m√£ h√≥a cho 'male':", value=0, key="sex_male")
            sex_female = st.number_input("Nh·∫≠p gi√° tr·ªã m√£ h√≥a cho 'female':", value=1, key="sex_female")

            # Ki·ªÉm tra xem gi√° tr·ªã m√£ h√≥a c√≥ tr√πng nhau kh√¥ng
            if sex_male == sex_female:
                st.error("Gi√° tr·ªã m√£ h√≥a cho 'male' v√† 'female' kh√¥ng ƒë∆∞·ª£c tr√πng nhau!")
            else:
                # M√£ h√≥a c·ªôt 'Sex'
                if 'Sex' in self.data.columns:
                    self.data['Sex'] = self.data['Sex'].map({'male': sex_male, 'female': sex_female})
                    st.write(f"ƒê√£ m√£ h√≥a 'male' th√†nh {sex_male} v√† 'female' th√†nh {sex_female}.")

            # Cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p gi√° tr·ªã m√£ h√≥a cho 'Embarked'
            st.write("**M√£ h√≥a c·ªôt Embarked:**")
            embarked_C = st.number_input("Nh·∫≠p gi√° tr·ªã m√£ h√≥a cho 'C':", value=0, key="embarked_C")
            embarked_Q = st.number_input("Nh·∫≠p gi√° tr·ªã m√£ h√≥a cho 'Q':", value=1, key="embarked_Q")
            embarked_S = st.number_input("Nh·∫≠p gi√° tr·ªã m√£ h√≥a cho 'S':", value=2, key="embarked_S")

            # Ki·ªÉm tra xem gi√° tr·ªã m√£ h√≥a c√≥ tr√πng nhau kh√¥ng
            embarked_values = [embarked_C, embarked_Q, embarked_S]
            if len(embarked_values) != len(set(embarked_values)):
                st.error("Gi√° tr·ªã m√£ h√≥a cho 'C', 'Q', v√† 'S' kh√¥ng ƒë∆∞·ª£c tr√πng nhau!")
            else:
                # ƒêi·ªÅn gi√° tr·ªã thi·∫øu cho 'Embarked' v√† m√£ h√≥a
                if 'Embarked' in self.data.columns:
                    self.data['Embarked'] = self.data['Embarked'].fillna('Unknown')

                    # M√£ h√≥a c·ªôt 'Embarked'
                    embarked_mapping = {'C': embarked_C, 'Q': embarked_Q, 'S': embarked_S}
                    self.data['Embarked'] = self.data['Embarked'].map(lambda x: embarked_mapping.get(x, -1))
                    st.write(f"ƒê√£ m√£ h√≥a 'C' th√†nh {embarked_C}, 'Q' th√†nh {embarked_Q}, v√† 'S' th√†nh {embarked_S}.")
                    # Hi·ªÉn th·ªã d·ªØ li·ªáu sau khi m√£ h√≥a
                    st.write("D·ªØ li·ªáu sau khi m√£ h√≥a:")
                    st.dataframe(self.data.head())


            
            mlflow.end_run()
            return self.data
            
        except Exception as e:
            st.error(f"L·ªói khi ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
            mlflow.end_run(status='FAILED')
            return None


def create_streamlit_app():
    st.title("Titanic üö¢")
    
    # S·ª≠ d·ª•ng st.tabs ƒë·ªÉ t·∫°o thanh menu
    tab1, tab2, tab3 = st.tabs([ "üîç X·ª≠ l√Ω v√† Hu·∫•n luy·ªán ","ü™Ñ D·ª± ƒëo√°n", "üöÄ MLflow"])
    analyzer = TitanicAnalyzer()
        
    with tab1:
        data_path = "titanic.csv"  # ƒê∆∞·ªùng d·∫´n c·ªë ƒë·ªãnh
        analyzer = TitanicAnalyzer()
        data = analyzer.load_and_preprocess(data_path)
        total_samples = len(data)

        # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn t·ª∑ l·ªá chia d·ªØ li·ªáu
        st.write("##### üìä Ch·ªçn t·ª∑ l·ªá chia d·ªØ li·ªáu")
        test_size = st.slider("T·∫≠p ki·ªÉm tra (Test)", 0.1, 0.3, 0.2)  # Ch·ªçn Test tr∆∞·ªõc
        train_valid_size = 1 - test_size  # Ph·∫ßn c√≤n l·∫°i d√†nh cho Train + Validation

        valid_size = st.slider("T·ª∑ l·ªá Validation trong t·∫≠p Train", 0.1, 0.4, 0.2)  # T·ªâ l·ªá c·ªßa Valid trong Train
        train_size = 1 - valid_size  # T·∫≠p Train ch√≠nh x√°c

        # T√≠nh s·ªë m·∫´u
        test_samples = int(test_size * total_samples)
        train_valid_samples = total_samples - test_samples  # Train + Valid
        valid_samples = int(valid_size * train_valid_samples)
        train_samples = train_valid_samples - valid_samples  # Ph·∫ßn c√≤n l·∫°i cho Train

        # T·∫°o DataFrame hi·ªÉn th·ªã k·∫øt qu·∫£
        split_df = pd.DataFrame({
            "T·∫≠p d·ªØ li·ªáu": ["Train", "Validation", "Test"],
            "T·ª∑ l·ªá (%)": [f"{train_samples / total_samples * 100:.2f}", 
                        f"{valid_samples / total_samples * 100:.2f}", 
                        f"{test_samples / total_samples * 100:.2f}"],
            "S·ªë l∆∞·ª£ng m·∫´u": [train_samples, valid_samples, test_samples]
        })

        # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
        st.write("üìã **T·ª∑ l·ªá chia d·ªØ li·ªáu v√† s·ªë l∆∞·ª£ng m·∫´u:**")
        st.table(split_df)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong Streamlit
        st.write("##### üìä **Hu·∫•n luy·ªán m√¥ h√¨nh h·ªìi quy**")
        # L·ª±a ch·ªçn m√¥ h√¨nh
        regression_type = st.radio("Ch·ªçn lo·∫°i h·ªìi quy:", ["Multiple Regression", "Polynomial Regression"])

        # Ch·ªçn b·∫≠c c·ªßa Polynomial Regression (ch·ªâ hi·ªÉn th·ªã n·∫øu ch·ªçn Polynomial)
        degree = None
        if regression_type == "Polynomial Regression":
            degree = st.slider("Ch·ªçn b·∫≠c c·ªßa h·ªìi quy ƒëa th·ª©c:", min_value=2, max_value=5, value=2)

        # Load d·ªØ li·ªáu v√† chia train/valid/test
        X = data.drop(columns=["Survived"])
        y = data["Survived"]

        X_train, X_temp, y_train, y_temp = train_test_split(X, y, train_size=train_size, random_state=42)
        X_valid, X_test, y_valid, y_test = train_test_split(X_temp, y_temp, train_size=valid_size / (valid_size + test_size), random_state=42)
        
        imputer = SimpleImputer(strategy='mean')  # ƒêi·ªÅn gi√° tr·ªã thi·∫øu b·∫±ng gi√° tr·ªã trung b√¨nh
        X_train = imputer.fit_transform(X_train)
        X_valid = imputer.transform(X_valid)
        X_test = imputer.transform(X_test)

        # Chu·∫©n h√≥a d·ªØ li·ªáu
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_valid_scaled = scaler.transform(X_valid)
        X_test_scaled = scaler.transform(X_test)

        # L∆∞u scaler v√†o session_state
        st.session_state["scaler"] = scaler

        with mlflow.start_run():
            # Ch·ªçn m√¥ h√¨nh d·ª±a tr√™n lo·∫°i h·ªìi quy
            if regression_type == "Polynomial Regression":
                poly = PolynomialFeatures(degree=degree)
                X_train_poly = poly.fit_transform(X_train_scaled)
                X_valid_poly = poly.transform(X_valid_scaled)
                X_test_poly = poly.transform(X_test_scaled)

                model = LinearRegression()
                model.fit(X_train_poly, y_train)

                y_pred_train = model.predict(X_train_poly)
                y_pred_valid = model.predict(X_valid_poly)
                y_pred_test = model.predict(X_test_poly)

            else:  # Multiple Regression
                model = LinearRegression()
                model.fit(X_train_scaled, y_train)

                y_pred_train = model.predict(X_train_scaled)
                y_pred_valid = model.predict(X_valid_scaled)
                y_pred_test = model.predict(X_test_scaled)

            # L∆∞u m√¥ h√¨nh v√†o session_state
            st.session_state["model"] = model
            if regression_type == "Polynomial Regression":
                st.session_state["poly"] = poly

            # T√≠nh to√°n metrics
            mse_train = mean_squared_error(y_train, y_pred_train)
            mse_valid = mean_squared_error(y_valid, y_pred_valid)
            mse_test = mean_squared_error(y_test, y_pred_test)

            r2_train = r2_score(y_train, y_pred_train)
            r2_valid = r2_score(y_valid, y_pred_valid)
            r2_test = r2_score(y_test, y_pred_test)

            # Cross-validation
            # Th√™m thanh tr∆∞·ª£t ƒë·ªÉ ch·ªçn s·ªë l∆∞·ª£ng folds cho cross-validation
            cv_folds = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng folds cho Cross-Validation:", min_value=2, max_value=10, value=5, step=1)
            y_pred_cv = cross_val_predict(model, X_train_scaled, y_train, cv=cv_folds)
            mse_cv = mean_squared_error(y_train, y_pred_cv)

            # Ghi log v√†o MLflow
            mlflow.log_metrics({
                "train_mse": mse_train,
                "valid_mse": mse_valid,
                "test_mse": mse_test,
                "cv_mse": mse_cv
            })

            st.write(f"**Lo·∫°i h·ªìi quy ƒëang s·ª≠ d·ª•ng:** {regression_type}")
            
            results_df = pd.DataFrame({
                "Metric": ["MSE (Train)", "MSE (Validation)", "MSE (Test)", "MSE (Cross-Validation)"],
                "Value": [mse_train, mse_valid, mse_test, mse_cv]
            })
            if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
                st.write("**üìå K·∫øt qu·∫£ ƒë√°nh gi√° m√¥ h√¨nh:**")
                st.table(results_df)
    with tab2 :             
            # Prediction interface
            st.subheader("Giao di·ªán d·ª± ƒëo√°n")
# Ki·ªÉm tra n·∫øu m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán tr∆∞·ªõc khi d·ª± ƒëo√°n
            if 'model' in st.session_state and 'scaler' in st.session_state:
                analyzer.model = st.session_state['model']
                analyzer.scaler = st.session_state['scaler']
                if regression_type == "Polynomial Regression":
                    analyzer.poly = st.session_state['poly']
                analyzer.is_fitted = True
            else:
                st.error("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc khi d·ª± ƒëo√°n!")

            if analyzer.is_fitted:
                col1, col2 = st.columns(2)

                with col1:
                    pclass = st.selectbox("Passenger Class", [1, 2, 3])
                    age = st.number_input("Age", 0, 100, 30)
                    sex = st.selectbox("Sex", ["male", "female"])
                
                with col2:
                    sibsp = st.number_input("Siblings", 0, 10, 0)
                    parch = st.number_input("Parents/Children", 0, 10, 0)
                    fare = st.number_input("Fare", 0.0, 500.0, 32.0)
                    embarked = st.selectbox("Port of Embarkation", ['C', 'Q', 'S'])
                
                if st.button("D·ª± ƒëo√°n"):

                    # T·∫°o DataFrame ƒë·∫ßu v√†o
                    input_data = pd.DataFrame({
                        'Pclass': [pclass],
                        'Age': [age],
                        'SibSp': [sibsp],
                        'Parch': [parch],
                        'Fare': [fare],
                        'Sex': [analyzer.sex_male if sex == "male" else analyzer.sex_female],  # S·ª≠ d·ª•ng gi√° tr·ªã m√£ h√≥a do ng∆∞·ªùi d√πng nh·∫≠p
                        'Embarked': [analyzer.embarked_C if embarked == "C" else 
                                        analyzer.embarked_Q if embarked == "Q" else 
                                        analyzer.embarked_S]  
                    })
                    # Ki·ªÉm tra xem ƒë·ªëi t∆∞·ª£ng c√≥ thu·ªôc t·∫≠p d·ªØ li·ªáu g·ªëc hay kh√¥ng
                    exists_in_data = False
                    if analyzer.data is not None:
                        exists_in_data = any((analyzer.data['Pclass'] == pclass) & 
                                            (analyzer.data['Age'] == age) & 
                                            (analyzer.data['SibSp'] == sibsp) & 
                                            (analyzer.data['Parch'] == parch) & 
                                            (analyzer.data['Fare'] == fare) & 
                                            (analyzer.data['Sex'] == (analyzer.sex_male if sex == "male" else analyzer.sex_female)) & 
                                            (analyzer.data['Embarked'] == (analyzer.embarked_C if embarked == "C" else 
                                                                            analyzer.embarked_Q if embarked == "Q" else 
                                                                            analyzer.embarked_S)))

                    # Scale d·ªØ li·ªáu ƒë·∫ßu v√†o
                    input_scaled = st.session_state['scaler'].transform(input_data)
                    
                    # Ki·ªÉm tra xem m√¥ h√¨nh c√≥ s·ª≠ d·ª•ng PolynomialFeatures kh√¥ng
                    if regression_type == "Polynomial Regression":
                        input_transformed = st.session_state['poly'].transform(input_scaled)
                    else:
                        input_transformed = input_scaled

                    # D·ª± ƒëo√°n
                    prediction = st.session_state['model'].predict(input_transformed)[0]
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.success(f"D·ª± ƒëo√°n : {'Survived' if prediction == 1 else 'Not Survived'}")
                     # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ vi·ªác ƒë·ªëi t∆∞·ª£ng c√≥ thu·ªôc t·∫≠p d·ªØ li·ªáu g·ªëc hay kh√¥ng
                    if exists_in_data:
                        st.info("ƒê·ªëi t∆∞·ª£ng n√†y c√≥ t·ªìn t·∫°i trong t·∫≠p d·ªØ li·ªáu g·ªëc.")
                    else:
                        st.warning("ƒê·ªëi t∆∞·ª£ng n√†y kh√¥ng c√≥ trong t·∫≠p d·ªØ li·ªáu g·ªëc.")

    with tab3:
            st.header("üìä MLflow Tracking")

            # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c phi√™n l√†m vi·ªác
            if st.button("Xem c√°c phi√™n l√†m vi·ªác"):
                # L·∫•y danh s√°ch c√°c phi√™n l√†m vi·ªác
                runs = mlflow.search_runs(order_by=["start_time desc"])
                if not runs.empty:
                    st.write("### Danh s√°ch c√°c phi√™n l√†m vi·ªác:")
                    st.dataframe(runs[["run_id", "experiment_id", "start_time", "status", "metrics.train_mse", "metrics.valid_mse", "metrics.test_mse"]])

                    # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt cho t·ª´ng phi√™n l√†m vi·ªác
                    selected_run_id = st.selectbox("Ch·ªçn m·ªôt phi√™n l√†m vi·ªác ƒë·ªÉ xem chi ti·∫øt:", runs['run_id'].tolist())
                    if selected_run_id:
                        run_details = mlflow.get_run(selected_run_id)
                        # st.write("### Th√¥ng tin chi ti·∫øt cho phi√™n l√†m vi·ªác:", selected_run_id)
                        # st.write("**Tr·∫°ng th√°i:**", run_details.info.status)
                        # st.write("**Th·ªùi gian b·∫Øt ƒë·∫ßu:**", run_details.info.start_time)
                        # st.write("**Th·ªùi gian k·∫øt th√∫c:**", run_details.info.end_time)
                        st.write("**Tham s·ªë:**")
                        for key, value in run_details.data.params.items():
                            st.write(f"- **{key}**: {value}")
                        st.write("**Metric:**")
                        for key, value in run_details.data.metrics.items():
                            st.write(f"- **{key}**: {value}")
                        st.write("**Artifacts:**")
                        # if run_details.info.artifact_uri:
                        #     st.write(f"- **Artifact URI**: {run_details.info.artifact_uri}")
                        # else:
                        #     st.write("- Kh√¥ng c√≥ artifacts n√†o.")

                else:
                    st.write("Kh√¥ng c√≥ phi√™n l√†m vi·ªác n√†o ƒë∆∞·ª£c ghi l·∫°i.")

            # Hi·ªÉn th·ªã MLflow Tracking UI trong iframe
            mlflow_url = "http://localhost:5000"  # Thay ƒë·ªïi n·∫øu ch·∫°y tr√™n server kh√°c
            st.markdown(f"[M·ªü MLflow Tracking UI]({mlflow_url})", unsafe_allow_html=True)


if __name__ == "__main__":
    create_streamlit_app()
